{"version":3,"sources":["src/server/accessors/Notifier.ts"],"names":[],"mappings":";;;;;;;;;;AAKA,qDAAkD;AAElD;IACI,YACqB,UAAuB,EACvB,SAAyB,EACzB,KAAa;QAFb,eAAU,GAAV,UAAU,CAAa;QACvB,cAAS,GAAT,SAAS,CAAgB;QACzB,UAAK,GAAL,KAAK,CAAQ;IAC9B,CAAC;IAEQ,UAAU,CAAC,IAAW,EAAE,OAAiB;;YAClD,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE;gBACvC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAE7D,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;aAC5B;YAED,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/D,CAAC;KAAA;IAEY,UAAU,CAAC,IAAW,EAAE,OAAiB;;YAClD,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE;gBACvC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAE7D,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;aAC5B;YAED,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/D,CAAC;KAAA;IAEM,iBAAiB;QACpB,OAAO,IAAI,+BAAc,EAAE,CAAC;IAChC,CAAC;CACJ;AA9BD,4BA8BC","file":"Notifier.js","sourcesContent":["import { IMessageBuilder, INotifier } from '../../definition/accessors';\nimport { IMessage } from '../../definition/messages';\nimport { IRoom } from '../../definition/rooms';\nimport { IUser } from '../../definition/users';\nimport { IMessageBridge, IUserBridge } from '../bridges';\nimport { MessageBuilder } from './MessageBuilder';\n\nexport class Notifier implements INotifier {\n    constructor(\n        private readonly userBridge: IUserBridge,\n        private readonly msgBridge: IMessageBridge,\n        private readonly appId: string,\n    ) { }\n\n    public async notifyUser(user: IUser, message: IMessage): Promise<void> {\n        if (!message.sender || !message.sender.id) {\n            const appUser = await this.userBridge.getAppUser(this.appId);\n\n            message.sender = appUser;\n        }\n\n        await this.msgBridge.notifyUser(user, message, this.appId);\n    }\n\n    public async notifyRoom(room: IRoom, message: IMessage): Promise<void> {\n        if (!message.sender || !message.sender.id) {\n            const appUser = await this.userBridge.getAppUser(this.appId);\n\n            message.sender = appUser;\n        }\n\n        await this.msgBridge.notifyRoom(room, message, this.appId);\n    }\n\n    public getMessageBuilder(): IMessageBuilder {\n        return new MessageBuilder();\n    }\n}\n"]}