{"version":3,"sources":["src/server/bridges/IUserBridge.ts"],"names":[],"mappings":"","file":"IUserBridge.js","sourcesContent":["import { IUser, IUserCreationOptions } from '../../definition/users';\n\nexport interface IUserBridge {\n    getById(id: string, appId: string): Promise<IUser>;\n\n    getByUsername(username: string, appId: string): Promise<IUser>;\n\n    getAppUser(appId: string): Promise<IUser | undefined>;\n\n    getActiveUserCount(): Promise<number>;\n\n    /**\n     * Creates a user.\n     * @param data the essential data for creating a user\n     * @param appId the id of the app calling this\n     * @param options options for passing extra data\n     */\n    create(data: Partial<IUser>, appId: string, options?: IUserCreationOptions): Promise<string>;\n\n    /**\n     * Remove a user.\n     *\n     * @param user the user object to be removed\n     * @param appId the id of the app executing the call\n     */\n    remove(user: IUser, appId: string): Promise<boolean>;\n\n    /**\n     * Updates a user.\n     *\n     * Note: the actual methods used by apps to update\n     * user properties are much more granular, but at a\n     * bridge level we can adopt a more practical approach\n     * since it is only accessible internally by the framework\n     *\n     * @param user the user to be updated\n     * @param updates a map of properties to be updated\n     * @param appId the id of the app executing the call\n     */\n    update(user: IUser, updates: Partial<IUser>, appId: string): Promise<boolean>;\n}\n"]}